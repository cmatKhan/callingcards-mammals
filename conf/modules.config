/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // control output to results of alignment
    withName: ".*:PREPARE_GENOME:.*" {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/genome/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // control output to results of alignment
    withName: ".*:ALIGN:.*" {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // control output to results of process alignment
    withName: ".*:PROCESS_ALIGNMENTS:.*" {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // add barcode patterns to
    withName: UMITOOLS_EXTRACT {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/processed_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        // if the r2 pattern is empty, only add the r1 barcode
        ext.prefix = { "${meta.id}_barcoded" }
        ext.args = [
            "--bc-pattern=${params.r1_bc_pattern}",
            params.r2_bc_pattern ? "--bc-pattern2=${params.r2_bc_pattern}" : ""
        ].join(' ').trim()
    }

    // add barcode patterns to
    withName: TRIMMOMATIC {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/processed_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        // if the r2 pattern is empty, only add the r1 barcode
        ext.prefix = { "${meta.id}_barcoded_cropped" }
        ext.args = [
            "CROP:${params.r1_crop}"
        ].join(' ').trim()
    }

}
